Linux Namespace
隔离容器构建：经过以下六步，我们可以构建出一个完全隔离的bash，或者说是容器

REF: http://blog.lucode.net/linux/intro-Linux-namespace-1.html
REF: http://blog.lucode.net/linux/intro-Linux-namespace-X.html
REF: http://blog.lucode.net/linux/intro-Linux-namespace-6.html
REF(strong): https://www.kernel.org/doc/Documentation/

LXC - LinuX Container
linux的进程隔离机制

1. UTS：主机名
2. IPC：进程间通信
3. PID：chroot进程树
4. NS：挂载点，首次登陆linux
5. NET：网络接入，包括接口
6. USER：将本地的虚拟user-id映射到真是的user-id

[1] uts 
uts1.c 简单演示UTC的使用方法
uts2.c 设定用户自己的namespace

[2] ipc
ipc.c 通过pipe简单演示ipc的使用方法

[3] pid
pid.c 重置PID技术，得到自己的"1"进程

[4] ns
ns.c 隔离挂载表，pid虽然创建了自己的"1"进程，但是仍然是使用系统本身的/proc文件系统，而ns则能实现真正的隔离
	 此时，我们已经得到了一个干净的空间了，吊吊吊
	 当然，现在也可以重新挂载一些基本的文件系统了
	 	1. 当我们执行cat /proc/self/mountinfo时，发现挂载还是shared，CLONE_NEWUTS对包含shared标志的挂载表并不能实现隔离
		解决方法，删除代码中的mount命令，改用 mount --make-private -t proc proc /proc
		2. 因为我实在vagrant测试，当执行ps aux报错(Error, do this: mount -t proc proc /proc)时，我们需要重新挂载
		如果重新挂载，执行vagrant ssh将登陆不上虚拟机
		解决方法，执行上面的命令

[5] net
net.c 隔离网络

[6] user
user1.c 检测系统对USER_NS的支持(很抱歉，我的虚拟机不支持。。。)
user2.c 如果系统支持USER_NS，则能够创建一个容器出来
	 这里面有很多限制条件，请查阅intro-Linux-namespace-6文章

执行命令，见证魔法的诞生
gcc -Wall uts.c -o uts && sudo ./uts
